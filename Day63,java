class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class Solution {
    public static Node insertionSort(Node head) {

        if (head == null || head.next == null) {
            // Already sorted or empty list
            return head;
        }

        Node sorted = null;
        Node current = head;

        while (current != null) {
            Node next = current.next;

            // Insert current node into the sorted list
            sorted = insertIntoSorted(sorted, current);

            current = next;
        }

        return sorted;
    }

    private static Node insertIntoSorted(Node sorted, Node newNode) {
        if (sorted == null || sorted.data >= newNode.data) {
            newNode.next = sorted;
            return newNode;
        }

        Node current = sorted;
        while (current.next != null && current.next.data < newNode.data) {
            current = current.next;
        }

        newNode.next = current.next;
        current.next = newNode;

        return sorted;
    }
}

// Additional class Day63
public class Day63 {
    public static void main(String[] args) {
        // Example usage
        Node head = new Node(3);
        head.next = new Node(1);
        head.next.next = new Node(4);
        head.next.next.next = new Node(2);
        head.next.next.next.next = new Node(5);

        System.out.println("Original List:");
        printList(head);

        Node sorted = Solution.insertionSort(head);

        System.out.println("\nSorted List:");
        printList(sorted);
    }

    private static void printList(Node head) {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
    }
}
